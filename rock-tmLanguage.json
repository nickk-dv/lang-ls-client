{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "rock",
	"scopeName": "source.rock",
	"files.associations": {
		"*.rock": "source.rock"
	},
	"patterns": [
		{ "include": "#comments"  },
		{ "include": "#keywords"  },
		{ "include": "#constants" },
		{ "include": "#strings"   },
		{ "include": "#procedures"},
		{ "include": "#type_decl" },
		{ "include": "#variables" }
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.block",
					"begin": "/\\*",
					"end": "\\*/",
					"captures": {
						"0": {
							"name": "comment.block.begin"
						},
						"1": {
							"name": "comment.block.end"
						}
					},
					"patterns": [
						{
							"include": "#comments"
						}
					]
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "comment.line.double-dash",
					"match": "//.*$"
				},
				{
					"name": "constant.language.rock",
					"match": "\\b(null|true|false)\\b"
				},
				{
					"name": "keyword.other.rock",
					"match": "\\b(let|var|pub|mut|super|package|mod|use|proc|enum|union|struct|const|global)\\b"
				},
				{
					"name": "keyword.control.rock",
					"match": "\\b(break|continue|return|for|defer|if|else|match|as|sizeof)\\b"
				},
				{
					"name": "entity.name.type.rock",
					"match": "\\b(bool|s8|s16|s32|s64|ssize|u8|u16|u32|u64|usize|f32|f64|char|rawptr)\\b"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"name": "constant.numeric",
					"match": "\\b(0|([1-9]\\d*))(f32|f64|s8|s16|s32|s64|ssize|u8|u16|u32|u64|usize)?\\b"
				},
				{
					"name": "constant.numeric",
					"match": "\\b\\d+\\.\\d+(f32|f64)?\\b"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.rock",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.rock",
					"match": "\\\\."
				}
			]
		},
		"procedures": {
			"patterns": [
				{
					"name": "entity.name.function.rock",
					"match": "\\b([A-Za-z_][A-Za-z_0-9]*?)\\b(?=(\\s*\\::)?\\s*\\()"
				}
			]
		},
		"type_decl": {
			"patterns": [
				{
					"name": "entity.name.type.rock",
					"match": "\\b([A-Za-z_][A-Za-z_0-9]*?)\\b(?=\\s*\\::\\s*(enum|union|struct))"
				},
				{
					"name": "entity.name.type.rock",
					"match": "\\b([A-Za-z_][A-Za-z_0-9]*?)\\b(?=\\s*\\::)"
				}
			]
		},
		"variables": {
            "patterns": [
                {
                    "name": "variable.rock",
                    "match": "(?<!\\.)\\b([A-Za-z_][A-Za-z_0-9]*?)\\b"
                }
            ]
        }
	}
}
