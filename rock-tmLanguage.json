{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "rock",
	"scopeName": "source.rock",
	"files.associations": {
		"*.rock": "source.rock"
	},
	"patterns": [
		{ "include": "#comment_line"  },
		{ "include": "#comment_block" },
		{ "include": "#constant"      },
		{ "include": "#keyword"       },
		{ "include": "#string"        },
		{ "include": "#proc_item"     },
		{ "include": "#type_item"     },
		{ "include": "#variable"      }
	],
	"repository": {
		"comment_line": {
			"patterns": [
				{
					"name": "comment.line.double-slash",
					"match": "//.*$"
				}
			]
		},
		"comment_block": {
			"patterns": [
				{
					"name": "comment.block",
					"begin": "/\\*",
					"end": "\\*/",
					"captures": {
						"0": {
							"name": "comment.block.begin"
						},
						"1": {
							"name": "comment.block.end"
						}
					},
					"patterns": [
						{
							"include": "#comment_block"
						}
					]
				}
			]
		},
		"constant": {
			"patterns": [
				{
					"name": "constant.numeric.rock",
					"match": "\\b\\d+\\.\\d+\\b"
				},
				{
					"name": "constant.numeric.rock",
					"match": "\\b\\d+\\b"
				},
				{
					"name": "constant.language.rock",
					"match": "\\b(null|true|false)\\b"
				}
			]
		},
		"keyword": {
			"patterns": [
				{
					"name": "keyword.other.rock",
					"match": "\\b(pub|proc|enum|union|struct|const|global|import)\\b"
				},
				{
					"name": "keyword.other.rock",
					"match": "\\b(let|mut|break|continue|return|for|defer|if|else|match|as|sizeof)\\b"
				},
				{
					"name": "entity.name.type.rock",
					"match": "\\b(s8|s16|s32|s64|ssize|u8|u16|u32|u64|usize|f16|f32|f64|bool|char|rawptr|void|never)\\b"
				}
			]
		},
		"string": {
			"name": "string.quoted.double.rock",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.rock",
					"match": "\\\\."
				}
			]
		},
		"proc_item": {
			"patterns": [
				{
					"name": "entity.name.function.rock",
					"match": "(?<=\\bproc\\s+)\\b([A-Za-z_][A-Za-z_0-9]*)\\b"
				},
				{
					"name": "entity.name.function.rock",
					"match": "\\b([A-Za-z_][A-Za-z_0-9]*)\\b(?=\\s*\\()"
				}
			]
		},
		"type_item": {
			"patterns": [
				{
					"name": "entity.name.type.rock",
					"match": "(?<=\\b(enum|union|struct)\\s+)\\b([A-Za-z_][A-Za-z_0-9]*)\\b"
				}
			]
		},
		"variable": {
			"patterns": [
				{
					"name": "variable.rock",
					"match": "(?<!\\.)\\b([A-Za-z_][A-Za-z_0-9]*?)\\b"
				}
			]
		}
	}
}
